#!/usr/bin/env python3
"""
Performance Dashboard for Explainium
====================================

Real-time performance monitoring and analysis dashboard.
Shows the results of our performance optimizations.

Usage:
    python src/scripts/performance_dashboard.py
"""

import sys
import os
import time
import json
from pathlib import Path
from datetime import datetime

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from src.core.performance_monitor import get_performance_monitor, cleanup_performance_monitor
from src.processors.processor import DocumentProcessor

def print_header():
    """Print dashboard header"""
    print("=" * 80)
    print("üöÄ EXPLAINIUM PERFORMANCE DASHBOARD")
    print("=" * 80)
    print(f"üìä Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)

def print_performance_summary(monitor):
    """Print performance summary"""
    print("\nüìà PERFORMANCE OVERVIEW")
    print("-" * 40)
    
    try:
        summary = monitor.get_performance_summary()
        
        if 'error' in summary:
            print(f"‚ùå Error: {summary['error']}")
            return
        
        overview = summary.get('overview', {})
        print(f"üìÑ Total Documents Processed: {overview.get('total_documents_processed', 0)}")
        print(f"‚è±Ô∏è  Average Processing Time: {overview.get('average_processing_time', 0):.2f}s")
        print(f"üîÑ Currently Processing: {overview.get('current_processing_count', 0)}")
        print(f"‚ö†Ô∏è  Performance Issues: {overview.get('performance_issues_count', 0)}")
        
        # Recent performance
        recent = summary.get('recent_performance', {})
        print(f"\nüìä Recent Performance Trend: {recent.get('performance_trend', 'stable').upper()}")
        
        # System health
        system = summary.get('system_health', {})
        print(f"üíª Current CPU: {system.get('current_cpu', 0):.1f}%")
        print(f"üß† Current Memory: {system.get('current_memory', 0):.1f}%")
        
        if system.get('system_warnings'):
            print(f"‚ö†Ô∏è  System Warnings: {', '.join(system['system_warnings'])}")
        
    except Exception as e:
        print(f"‚ùå Error getting performance summary: {e}")

def print_optimization_recommendations(monitor):
    """Print optimization recommendations"""
    print("\nüí° OPTIMIZATION RECOMMENDATIONS")
    print("-" * 40)
    
    try:
        summary = monitor.get_performance_summary()
        
        if 'error' in summary:
            return
        
        recommendations = summary.get('optimization_recommendations', [])
        
        if recommendations:
            for i, rec in enumerate(recommendations, 1):
                print(f"{i}. {rec}")
        else:
            print("‚úÖ No optimization recommendations at this time")
            
    except Exception as e:
        print(f"‚ùå Error getting recommendations: {e}")

def print_recent_documents(monitor):
    """Print recent document processing results"""
    print("\nüìã RECENT DOCUMENTS")
    print("-" * 40)
    
    try:
        summary = monitor.get_performance_summary()
        
        if 'error' in summary:
            return
        
        recent_docs = summary.get('recent_performance', {}).get('last_10_documents', [])
        
        if recent_docs:
            print(f"{'ID':<15} {'Duration':<12} {'Score':<8} {'Type':<15}")
            print("-" * 60)
            
            for doc in recent_docs[-5:]:  # Show last 5
                doc_id = doc.get('document_id', 'N/A')[:14]
                duration = f"{doc.get('duration', 0):.1f}s"
                score = f"{doc.get('performance_score', 0):.0f}"
                file_type = doc.get('file_type', 'N/A')[:14]
                
                print(f"{doc_id:<15} {duration:<12} {score:<8} {file_type:<15}")
        else:
            print("üìù No documents processed yet")
            
    except Exception as e:
        print(f"‚ùå Error getting recent documents: {e}")

def print_optimization_status():
    """Print current optimization status"""
    print("\n‚ö° OPTIMIZATION STATUS")
    print("-" * 40)
    
    optimizations = [
        "‚úÖ Async Document Processing Pipeline",
        "‚úÖ Parallel Content Extraction", 
        "‚úÖ Smart File Type Detection with Caching",
        "‚úÖ Intelligent Fallback Routing",
        "‚úÖ M4 Chip Optimizations (MLX)",
        "‚úÖ Content Chunking for LLM Processing",
        "‚úÖ Parallel Entity Extraction",
        "‚úÖ Intelligent Processing Decisions",
        "‚úÖ Performance Monitoring System",
        "‚úÖ Memory-Efficient Processing",
        "‚úÖ Pre-compiled Regex Patterns",
        "‚úÖ Lazy Loading for Heavy Dependencies"
    ]
    
    for opt in optimizations:
        print(opt)

def print_target_metrics():
    """Print target performance metrics"""
    print("\nüéØ TARGET PERFORMANCE METRICS")
    print("-" * 40)
    
    targets = [
        "‚è±Ô∏è  Target Processing Time: < 2 minutes per document",
        "üöÄ Speed Improvement Target: 5x faster than current",
        "üß† Memory Usage: < 80% of available RAM",
        "üíª CPU Usage: < 90% during processing",
        "üìä Quality Score: > 75% confidence",
        "üîÑ Cache Hit Rate: > 60% for repeated content"
    ]
    
    for target in targets:
        print(target)

def print_usage_instructions():
    """Print usage instructions"""
    print("\nüìñ USAGE INSTRUCTIONS")
    print("-" * 40)
    
    instructions = [
        "1. Start the performance monitor: monitor = get_performance_monitor()",
        "2. Process documents: processor.process_document_async()",
        "3. View real-time metrics: monitor.get_performance_summary()",
        "4. Export data: monitor.export_performance_data('output.json')",
        "5. Cleanup: monitor.cleanup()"
    ]
    
    for instruction in instructions:
        print(instruction)

def print_footer():
    """Print dashboard footer"""
    print("\n" + "=" * 80)
    print("üîç For detailed analysis, use monitor.get_document_performance(doc_id)")
    print("üìä Export data with monitor.export_performance_data('filename.json')")
    print("üßπ Cleanup with monitor.cleanup() when done")
    print("=" * 80)

def main():
    """Main dashboard function"""
    try:
        print_header()
        
        # Initialize performance monitor
        print("üîÑ Initializing performance monitor...")
        monitor = get_performance_monitor()
        
        # Initialize processor for demo
        print("üîÑ Initializing document processor...")
        processor = DocumentProcessor()
        
        print("‚úÖ Systems initialized successfully!")
        
        # Display dashboard sections
        print_performance_summary(monitor)
        print_optimization_recommendations(monitor)
        print_recent_documents(monitor)
        print_optimization_status()
        print_target_metrics()
        print_usage_instructions()
        print_footer()
        
        # Interactive mode
        print("\nüîÑ Dashboard will refresh every 10 seconds. Press Ctrl+C to exit.")
        
        try:
            while True:
                time.sleep(10)
                print("\n" + "="*80)
                print(f"üîÑ Refreshing at {datetime.now().strftime('%H:%M:%S')}")
                print_performance_summary(monitor)
                print_recent_documents(monitor)
                
        except KeyboardInterrupt:
            print("\n\nüëã Shutting down dashboard...")
            
    except Exception as e:
        print(f"‚ùå Error in dashboard: {e}")
        
    finally:
        # Cleanup
        try:
            if 'processor' in locals():
                processor.cleanup()
            if 'monitor' in locals():
                monitor.cleanup()
            print("‚úÖ Cleanup complete")
        except Exception as e:
            print(f"‚ö†Ô∏è  Cleanup error: {e}")

if __name__ == "__main__":
    main()